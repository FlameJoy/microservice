syntax = "proto3";

package gateway;

option go_package = "./proto";

service GatewayService {
  // Auth-service
  rpc Login (GatewayLoginReq) returns (GatewayLoginResp);
  rpc Register (GatewayRegisterReq) returns (GatewayRegisterResp);
  // Product-service
  rpc CreateProduct(GatewayCreateProductReq) returns (GatewayCreateProductResp);
  rpc UpdateProduct(GatewayUpdateProductReq) returns (GatewayUpdateProductResp);
  rpc DeleteProduct(GatewayDeleteProductReq) returns (GatewayDeleteProductResp);

  // Order-service
  rpc CreateOrder (GatewayOrderCreateReq) returns (GatewayOrderCreateResp);
}

// Auth-service
message GatewayLoginReq {
  string username = 1;
  string password = 2;
}

message GatewayLoginResp {
  string token = 1;
  string message = 2;
}

message GatewayRegisterReq {
  string username = 1;
  string password = 2;
  string email = 3;
}

message GatewayRegisterResp {
  string message = 1;
}

// Product-service
message GatewayCreateProductReq {
  string SKU = 1;
  string Name = 2;
  int64 Price = 3;
  string Category = 4;
  string UOM = 5;
  string Brand = 6;
  int64 Stock = 7; 
}

message GatewayCreateProductResp {
  int64 id = 1;
  string message = 2;
}

message GatewayUpdateProductReq {
  string sqlQuery = 1;
  repeated string args = 2; // Аргументы запроса
}

message GatewayUpdateProductResp {
  bool success = 1;  // Флаг успешного выполнения
  string message = 2;
}

message GatewayDeleteProductReq {
  int64 id = 1;
}

message GatewayDeleteProductResp {
  string message = 1;
}

// Order-service

message GatewayOrderCreateReq {
  int32 itemID = 1;
  string name = 2;
  int32 quantity = 3;
  int32 price = 4;
}

message GatewayOrderCreateResp {
  int32 ID = 1;
  string name = 2;
  int32 totalSum = 3;
}
